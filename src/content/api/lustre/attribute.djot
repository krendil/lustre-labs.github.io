title = "lustre/attribute"
route = "/api/lustre/attribute"

description = ""

---

# lustre/attribute

## Constructing attributes

{api}
{target=erlang javascript}
### Attribute

```gleam
pub opaque type Attribute(msg)
```

{api}
{target=erlang javascript}
### attribute

```gleam
pub fn attribute(name: String, value: String) -> Attribute(msg)
```

Attributes are the string key-value pairs that you see attached directly to HTML
tags. **These are always emitted when rendering a property to a string.** There
is a subtle difference between HTML attributes and DOM properties, see below.

{api}
{target=erlang javascript}
### property

```gleam
pub fn property(name: String, value: any) -> Attribute(msg)
```

Properties set the state of an element by manipulating the JavaScript properties
on the DOM node. **Non-string or non-boolean values will not be emitted when rendering
a property to a string.**

{api}
{target=erlang javascript}
### on

```gleam
pub fn on(
  name: String,
  handler: fn(Dynamic) -> Result(msg, error)
) -> Attribute(msg)
```

## Mapping attributes

{api}
{target=erlang javascript}
### map

```gleam
pub fn map(attr: Attribute(a), f: fn(a) -> b) -> Attribute(b)
```

## Conversions

{api}
{target=erlang javascript}
### to_string

```gleam
pub fn to_string(attr: Attribute(msg)) -> String
```

{api}
{target=erlang javascript}
### to_string_builder

```gleam
pub fn to_string_builder(attr: Attribute(msg)) -> StringBuilder
```

## Common attributes

{api}
{target=erlang javascript}
### style

```gleam
pub fn style(properties: List(#(String, String))) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### class

```gleam
pub fn class(name: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### classes

```gleam
pub fn classes(names: List(#(String, Bool))) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### id

```gleam
pub fn id(name: String) -> Attribute(msg)
```

## Input attributes

{api}
{target=erlang javascript}
### type\_

```gleam
pub fn type_(name: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### value

```gleam
pub fn value(val: Dynamic) -> Attribute(msg)
```

Set the value property of an element. This attribute takes a `Dynamic`

{api}
{target=erlang javascript}
### checked

```gleam
pub fn checked(is_checked: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### placeholder

```gleam
pub fn placeholder(text: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### selected

```gleam
pub fn selected(is_selected: Bool) -> Attribute(msg
```

## More input attributes

{api}
{target=erlang javascript}
### accept

```gleam
pub fn accept(types: List(String)) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### accept_charset

```gleam
pub fn accept_charset(types: List(String)) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### msg

```gleam
pub fn msg(uri: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### autocomplete

```gleam
pub fn autocomplete(name: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### autofocus

```gleam
pub fn autofocus(should_autofocus: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### disabled

```gleam
pub fn disabled(is_disabled: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### name

```gleam
pub fn name(name: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### pattern

```gleam
pub fn pattern(regex: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### readonly

```gleam
pub fn readonly(is_readonly: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### required

```gleam
pub fn required(is_required: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### for

```gleam
pub fn for(id: String) -> Attribute(msg)
```

## Range attributes

{api}
{target=erlang javascript}
### max

```gleam
pub fn max(val: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### min

```gleam
pub fn min(val: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### step

```gleam
pub fn step(val: String) -> Attribute(msg)
```

## Textarea attributes

{api}
{target=erlang javascript}
### cols

```gleam
pub fn cols(val: Int) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### rows

```gleam
pub fn rows(val: Int) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### wrap

```gleam
pub fn wrap(mode: String) -> Attribute(msg)
```

## Link attributes

{api}
{target=erlang javascript}
### href

```gleam
pub fn href(uri: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### target

```gleam
pub fn target(target: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### download

```gleam
pub fn download(filename: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### rel

```gleam
pub fn rel(relationship: String) -> Attribute(msg)
```

## Embedded content

{api}
{target=erlang javascript}
### src

```gleam
pub fn src(uri: String) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### height

```gleam
pub fn height(val: Int) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### width

```gleam
pub fn width(val: Int) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### alt

```gleam
pub fn alt(text: String) -> Attribute(msg)
```

## Audio and video attributes

{api}
{target=erlang javascript}
### autoplay

```gleam
pub fn autoplay(should_autoplay: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### controls

```gleam
pub fn controls(visible: Bool) -> Attribute(msg)
```

{api}
{target=erlang javascript}
### loop

```gleam
pub fn loop(should_loop: Bool) -> Attribute(msg)
```
