title = "lustre/element/svg"
route = "/api/lustre/element/svg"

description = ""

---

# lustre/element/svg

## Animation elements

{api}
{target=erlang javascript}
### animate

```gleam
pub fn animate(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### animate_motion

```gleam
pub fn animate_motion(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### animate_transform

```gleam
pub fn animate_transform(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### mpath

```gleam
pub fn mpath(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### set

```gleam
pub fn set(attrs: List(Attribute(msg))) -> Element(msg)
```

## Basic shapes

{api}
{target=erlang javascript}
### circle

```gleam
pub fn circle(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### ellipse

```gleam
pub fn ellipse(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### line

```gleam
pub fn line(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### polygon

```gleam
pub fn polygon(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### polyline

```gleam
pub fn polyline(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### rect

```gleam
pub fn rect(attrs: List(Attribute(msg))) -> Element(msg)
```

## Container elements

{api}
{target=erlang javascript}
### a

```gleam
pub fn a(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### defs

```gleam
pub fn defs(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### g

```gleam
pub fn g(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### marker

```gleam
pub fn marker(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### mask

```gleam
pub fn mask(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### missing_glyph

```gleam
pub fn missing_glyph(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### pattern

```gleam
pub fn pattern(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### svg

```gleam
pub fn svg(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### switch

```gleam
pub fn switch(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### symbol

```gleam
pub fn symbol(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

## Descriptive elements

{api}
{target=erlang javascript}
### desc

```gleam
pub fn desc(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### metadata

```gleam
pub fn metadata(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### title

```gleam
pub fn title(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

## Filter effects

{api}
{target=erlang javascript}
### fe_blend

```gleam
pub fn fe_blend(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_color_matrix

```gleam
pub fn fe_color_matrix(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_component_transfer

```gleam
pub fn fe_component_transfer(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_composite

```gleam
pub fn fe_composite(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_convolve_matrix

```gleam
pub fn fe_convolve_matrix(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_diffuse_lighting

```gleam
pub fn fe_diffuse_lighting(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_displacement_map

```gleam
pub fn fe_displacement_map(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_drop_shadow

```gleam
pub fn fe_drop_shadow(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_flood

```gleam
pub fn fe_flood(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_func_a

```gleam
pub fn fe_func_a(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_func_b

```gleam
pub fn fe_func_b(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_func_g

```gleam
pub fn fe_func_g(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_func_r

```gleam
pub fn fe_func_r(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_gaussian_blur

```gleam
pub fn fe_gaussian_blur(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_image

```gleam
pub fn fe_image(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_merge

```gleam
pub fn fe_merge(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_merge_node

```gleam
pub fn fe_merge_node(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_morphology

```gleam
pub fn fe_morphology(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_offset

```gleam
pub fn fe_offset(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_specular_lighting

```gleam
pub fn fe_specular_lighting(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_tile

```gleam
pub fn fe_tile(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_turbulence

```gleam
pub fn fe_turbulence(attrs: List(Attribute(msg))) -> Element(msg)
```

## Gradient elements

{api}
{target=erlang javascript}
### linear_gradient

```gleam
pub fn linear_gradient(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### radial_gradient

```gleam
pub fn radial_gradient(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### stop

```gleam
pub fn stop(attrs: List(Attribute(msg))) -> Element(msg)
```

## Graphical elements

{api}
{target=erlang javascript}
### image

```gleam
pub fn image(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### path

```gleam
pub fn path(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### text

```gleam
pub fn text(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### use\_

```gleam
pub fn use_(attrs: List(Attribute(msg))) -> Element(msg)
```

## Lighting elements

{api}
{target=erlang javascript}
### fe_distant_light

```gleam
pub fn fe_distant_light(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_point_light

```gleam
pub fn fe_point_light(attrs: List(Attribute(msg))) -> Element(msg)
```

{api}
{target=erlang javascript}
### fe_spot_light

```gleam
pub fn fe_spot_light(attrs: List(Attribute(msg))) -> Element(msg)
```

## Non-rendered elements

{api}
{target=erlang javascript}
### clip_path

```gleam
pub fn clip_path(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### script

```gleam
pub fn script(attrs: List(Attribute(msg)), js: String) -> Element(msg)
```

{api}
{target=erlang javascript}
### style

```gleam
pub fn style(attrs: List(Attribute(msg)), css: String) -> Element(msg)
```

## Renderable elements

{api}
{target=erlang javascript}
### foreign_object

```gleam
pub fn foreign_object(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### text_path

```gleam
pub fn text_path(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```

{api}
{target=erlang javascript}
### tspan

```gleam
pub fn tspan(
  attrs: List(Attribute(msg)),
  children: List(Element(msg)),
) -> Element(msg)
```
